package ResistIC.Personagens.Herois;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import ResistIC.Interfaces.AcaoDeCombate;
import ResistIC.Personagens.Personagem;
import ResistIC.Suporte.ConsoleColors;
import ResistIC.itens.Armas.Arma;

/**
 * Representa um her√≥i control√°vel pelo jogador.
 * 
 * <p>
 * Um {@code Heroi} √© uma especializa√ß√£o de {@code Personagem} com atributos de
 * progress√£o
 * como n√≠vel, experi√™ncia e sorte, al√©m de possuir uma lista de a√ß√µes de
 * combate.
 * </p>
 * 
 * @author Guilherme e Giovani
 * @version 1.0
 * @since 2025-10-08
 */
public abstract class Heroi extends Personagem {
    private int nivel;
    private int experiencia;
    private int pontos_para_proximo_nivel;
    private double sorte;
    private double variacao_sorte_heroi;
    private List<AcaoDeCombate> acoes;
    Random gerador = new Random();

    /**
     * Cria um her√≥i com atributos iniciais padr√£o.
     *
     * @param nome                 nome do her√≥i
     * @param arma                 arma equipada inicialmente
     * @param variacao_sorte_heroi fator de varia√ß√£o aplicado ao c√°lculo da sorte
     */
    public Heroi(String nome, Arma arma, double variacao_sorte_heroi) {
        super(nome, 200, 100, arma);
        this.nivel = 1;
        this.experiencia = 0;
        this.pontos_para_proximo_nivel = 100;
        this.acoes = new ArrayList<>();
        this.variacao_sorte_heroi = variacao_sorte_heroi;

    }

    /**
     * Retorna a lista de a√ß√µes dispon√≠veis do her√≥i.
     *
     * @return lista de a√ß√µes de combate
     */
    public List<AcaoDeCombate> getAcoes() {
        return acoes;
    }

    /**
     * Adiciona uma nova a√ß√£o de combate ao her√≥i.
     *
     * @param acao a√ß√£o a ser adicionada
     */

    public void addAcao(AcaoDeCombate acao) {
        this.acoes.add(acao);
    }

    /**
     * Retorna o valor atual da sorte do her√≥i.
     *
     * @return valor da sorte
     */
    public double getSorte() {
        return sorte;
    }

    /**
     * Incrementa a experi√™ncia do her√≥i. Quando a experi√™ncia total
     * atinge os {@code pontos_para_proximo_nivel}, o her√≥i sobe de n√≠vel.
     *
     * @param xpconcedido quantidade de experi√™ncia recebida
     */
    public void ganharExperiencia(int xpconcedido) {
        this.experiencia += xpconcedido;
        if (experiencia >= pontos_para_proximo_nivel) {
            // O n√≠vel do Her√≥i √© incrementado em 1 sempre que a experiencia atinge 100
            experiencia = experiencia % pontos_para_proximo_nivel;
            this.subirDeNivel();
        }

    }

    /**
     * Equipa uma arma ao heroi
     *
     * @param novaArma arma a ser equipada pelo heroi
     */
    public void equiparArma(Arma novaArma) {
        if (this.nivel < novaArma.getminNivel()) {
            System.out.println("O Her√≥i n√£o possui n√≠vel suficiente para equipar essa arma!");
        } else {
            this.setArma(novaArma);
            System.out.printf("A arma %s foi equipada!", novaArma.getClass().getSimpleName());
        }
    }

    /**
     * Aumenta os niveis e atributos do heroi
     *
     */
    private void subirDeNivel() {
        this.nivel += 1;
        this.pontosDeVida += 10;
        this.forca += 10;
        this.pontos_para_proximo_nivel += 100;
    }

    /**
     * Define a sorte do her√≥i de forma aleat√≥ria,
     * considerando o fator de varia√ß√£o {@code baria√ß√£o_sorte_heroi}.
     */
    public void definir_sorte() {
        this.sorte = gerador.nextDouble() + variacao_sorte_heroi;
    }

    /**
     * Exibe os status atuais do her√≥i.
     * Inclui informa√ß√µes de n√≠vel e experi√™ncia, al√©m dos status b√°sicos herdados.
     */
    @Override
    public void exibirStatus() {
        super.exibirStatus();

        System.out.println(
                "‚≠ê N√≠vel: " + ConsoleColors.PURPLE + nivel + ConsoleColors.RESET);
        System.out.println(
                "üìä Experi√™ncia: " + ConsoleColors.CYAN + experiencia + ConsoleColors.RESET);
        System.out
                .println(ConsoleColors.BLUE + "===============================================" + ConsoleColors.RESET);

    }

}
